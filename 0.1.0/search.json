[{"body":"private   silicon_area   —   function private function","id":"docstrings\\PublishTest.Lenslet.silicon_area.html"},{"body":"private   glob   —   function glob function","id":"docstrings\\PublishTest.Lenslet.glob.html"},{"body":"Details","id":"docs\\details.html#details"},{"body":"public   max_f_number   —   function max f number","id":"docstrings\\PublishTest.Lenslet.max_f_number.html"},{"body":"public   lenslet_display_size   —   function computes display size","id":"docstrings\\PublishTest.Lenslet.lenslet_display_size.html"},{"body":"you can use a negative margin and it will move the text left","id":"docs\\principles.html"},{"body":"Public This is new stuff .   Dev  reference .   Lenslet.ThisIsAStruct  reference . Here ’ s a citation  . wgt usbthjs","id":"docs\\public.html#public"},{"body":"public   plot_values   —   function will this show up?","id":"docstrings\\PublishTest.Lenslet.plot_values.html"},{"body":"public   display_area   —   function computes display area","id":"docstrings\\PublishTest.Lenslet.display_area.html"},{"body":"Principles parallelize tests and do not depend on downloading from web sites not under your control use Publish . jl use PackageTemplates . jl build sysimages strive for 90% code coverage long line jkfja;ldfja;slkjfd;lkajsdf;lkja;sldjf;laskjd;flkaj;lsdkjfal;ksjdflaksjdfljasdlkasjdlfjsdljflaskjdlaksmore text will this flip to a new line","id":"docs\\principles.html#principles"},{"body":"public   focal_length   —   function Don ’ t put text on same line as the three quote marks or won ’ t display properly in Publish . jl autogenerated text computes focal length","id":"docstrings\\PublishTest.Lenslet.focal_length.html"},{"body":"private   TestType   —   type This is to demonstrate doc of an abstract type","id":"docstrings\\PublishTest.Lenslet.TestType.html"},{"body":"Name Module Visibility Category  TestType   PublishTest.Lenslet   private   type   ThisIsAStruct   PublishTest.Lenslet   public   struct   angles   PublishTest.Lenslet   public   function   display_area   PublishTest.Lenslet   public   function   focal_length   PublishTest.Lenslet   public   function   glob   PublishTest.Lenslet   private   function   lenslet_display_size   PublishTest.Lenslet   public   function   max_f_number   PublishTest.Lenslet   public   function   plot_values   PublishTest.Lenslet   public   function   silicon_area   PublishTest.Lenslet   private   function ","id":"docstrings.html#docstring-index"},{"body":"JuliaProgrammingLanguage . jl You read about this amazing new programming language, Julia, that is interactive like Python but compiles to efficient code like C .  You wrote your first Julia program and benchmarked it Wait, what? That is slow like Python  not  fast like C, which takes X nanoseconds to execute the same function .  Why? It is because Julia solves what is called  “ the two programming language problem ” .  You program in a language like Python to write code quickly but then must rewrite the code in C or a similar language to make it run fast .  Now you have two code bases in two languages that must be maintained and kept in sync .  This is the  “ two programming language problem ” .  It is a sofware engineering headache . How does Julia solve this problem? example here showing how some code must be inherently inefficient, unless properly type annotated or separated by function barrier . In Julia you can write code quickly, like Python, but get speed like C .  At least that is the aspiration, which is mostly achieved today .  However, you must understand the limitations of the current Julia compiler or your code will be easy to write, like Python, but also  slow  like Python . Key problems: users don ’ t understand workflow .  Not well documented . Julia supports interactive, typeless programming .  When compiler can ’ t infer types it defaults to python like generic code which is very slow .  Mostly this doesn ’ t happen but occasionally it does in a way that confuses beginners .  Not uncommon to experience 20x - 50x slowdown . The garbage collector is not fully multithreaded so if your code allocates in the most frequently executed loop there can be enormous GC overhead .  Multithreaded code can be slower than single threaded code, which is rarely the case in other languages .  Good multithreaded performance requires more careful programming . multithreading example showing slowdown . Will begin with packages rather than programming because if you jump straight into programming O, that way madness lies; let me shun that;","id":"docs\\intro.html#juliaprogramminglanguagejl"},{"body":"What is a Project? Project . toml, environments, stacked environment, putting commonly used things Revise, OhMyREPL, etc . , in base environment .","id":"docs\\projects.html#what-is-a-project"},{"body":"Dev this is info this is tip this is warning this is compat Inline mathematics  . A paragraph containing  a footnote . The footnote content .","id":"docs\\dev.html#dev"},{"body":"public   ThisIsAStruct   —   struct this struct is to demonstrate ability of Publish to document structs more doc","id":"docstrings\\PublishTest.Lenslet.ThisIsAStruct.html"},{"body":"public   angles   —   function angles this updates in real time","id":"docstrings\\PublishTest.Lenslet.angles.html"}]